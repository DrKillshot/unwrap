"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[612],{4578:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var s=a(4848),l=a(8453);const t={title:"Maybe<Value>",sidebar_label:"Maybe",sidebar_position:1},o=void 0,i={id:"monads/maybe",title:"Maybe<Value>",description:"The Maybe monad may or may not hold some value. It is commonly used to represent optional values.",source:"@site/docs/monads/maybe.md",sourceDirName:"monads",slug:"/monads/maybe",permalink:"/unwrap/docs/monads/maybe",draft:!1,unlisted:!1,editUrl:"https://github.com/DrKillshot/unwrap/docs/monads/maybe.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Maybe<Value>",sidebar_label:"Maybe",sidebar_position:1},sidebar:"docs",previous:{title:"Monads",permalink:"/unwrap/docs/category/monads"},next:{title:"Either",permalink:"/unwrap/docs/monads/either"}},r={},c=[{value:"Maybe constructors",id:"maybe-constructors",level:2},{value:"Methods",id:"methods",level:2},{value:".map(fn)",id:"mapfn",level:3},{value:".flatMap(fn)",id:"flatmapfn",level:3},{value:".filter(fn)",id:"filterfn",level:3},{value:".isPresent()",id:"ispresent",level:3},{value:".isEmpty()",id:"isempty",level:3},{value:".where()",id:"where",level:3},{value:".ifPresent(fn)",id:"ifpresentfn",level:3},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",level:3},{value:".unwrap()",id:"unwrap",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Maybe"})," monad may or may not hold some value. It is commonly used to represent optional values."]}),"\n",(0,s.jsx)(n.h2,{id:"maybe-constructors",children:"Maybe constructors"}),"\n",(0,s.jsxs)(n.p,{children:["You can create a ",(0,s.jsx)(n.code,{children:"Maybe"})," by calling the ",(0,s.jsx)(n.code,{children:"Some"})," and ",(0,s.jsx)(n.code,{children:"None"})," constructors."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const aNumber = Maybe.Some(1);\nconst aNumber = Maybe.None();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also enforce their type for the ",(0,s.jsx)(n.code,{children:"Some"})," type"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Example"',children:"const aNumber = Maybe.Some<number>(1);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can create a ",(0,s.jsx)(n.code,{children:"Maybe"})," from a possible ",(0,s.jsx)(n.code,{children:"null"})," or ",(0,s.jsx)(n.code,{children:"undefined"})," type"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"Maybe.fromNullable('Hello world!') // Some('Hello world')\nMaybe.fromNullable(null) // None\nMaybe.fromNullable(undefined) // None\n"})}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Maybe"})," monad exposes several methods for value manipulation"]}),"\n",(0,s.jsx)(n.h3,{id:"mapfn",children:".map(fn)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.map<R>(fn: (input: T) => R): Maybe<R>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Transforms the value inside the maybe in case of ",(0,s.jsx)(n.code,{children:"Some"})," and does nothing otherwise."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nconst newValue = someValue.map(x => x * 2); // Some(10)\n\nconst noneValue = Maybe.None();\nconst unchangedValue = noneValue.map(x => x * 2); // None\n"})}),"\n",(0,s.jsx)(n.h3,{id:"flatmapfn",children:".flatMap(fn)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.flatMap<R>(fn: (input: T) => Maybe<R>): Maybe<R>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Transforms the value inside the maybe into another ",(0,s.jsx)(n.code,{children:"Maybe"})," and flattens the result."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:'const some = Maybe.Some(5);\nconst newSome = someValue.flatMap(x => Maybe.Some(x * 2)); // Some(10)\n\nconst hello = Maybe.Some("Hello world!")\nconst newHello = helloValue.flatMap(s => s.length > 10 ? Maybe.None() : Maybe.Some("") ) // None\n\nconst none = Maybe.None();\nconst unchangedNone = noneValue.flatMap(x => Maybe.Some(x * 2)); // None\n'})}),"\n",(0,s.jsx)(n.h3,{id:"filterfn",children:".filter(fn)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.filter(predicate: (input: T) => boolean): Maybe<T>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Filters the value inside the maybe based on a predicate function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nconst filteredValue = someValue.filter(x => x > 3); // Some(5)\nconst noneFilteredValue = someValue.filter(x => x < 3); // None\n\nconst noneValue = Maybe.None();\nconst unchangedValue = noneValue.filter(x => x > 3); // None\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ispresent",children:".isPresent()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.isPresent(): boolean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Checks if the ",(0,s.jsx)(n.code,{children:"Maybe"})," contains a value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nconsole.log(someValue.isPresent()); // true\n\nconst noneValue = Maybe.None();\nconsole.log(noneValue.isPresent()); // false\n"})}),"\n",(0,s.jsx)(n.h3,{id:"isempty",children:".isEmpty()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.isEmpty(): boolean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Checks if the ",(0,s.jsx)(n.code,{children:"Maybe"})," is empty."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nconsole.log(someValue.isEmpty()); // false\n\nconst noneValue = Maybe.None();\nconsole.log(noneValue.isEmpty()); // true\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"where",children:".where()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.where<S,N>(matcher: {Some: (input: T) => S, None: N}): S | N\nMaybe<T>.where<S,N>(matcher: {Some: S, None: N}): S | N\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is Unwrap's pattern matching."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nconst result = someValue.where({\n    Some: x => `Value is ${x}`,\n    None: 'No value'\n}); // \"Value is 5\"\n\nconst noneValue = Maybe.None();\nconst resultNone = noneValue.where({\n    Some: x => `Value is ${x}`,\n    None: 'No value'\n}); // \"No value\"\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you your ",(0,s.jsx)(n.code,{children:"Some"})," operation does not depend on the maybe value you can do, for example"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Example"',children:"const someValue = Maybe.Some(5);\nconst result = someValue.where({\n    Some: true,\n    None: false\n}); // true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ifpresentfn",children:".ifPresent(fn)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.ifPresent(fn: (input: T) => any): Maybe<T>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Applies a function to the value inside the ",(0,s.jsx)(n.code,{children:"Maybe"})," if it is ",(0,s.jsx)(n.code,{children:"Some"}),", does nothing otherwise."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nsomeValue.ifPresent(x => console.log(x)); // Logs: 5\n\nconst noneValue = Maybe.None();\nnoneValue.ifPresent(x => console.log(x)); // Does nothing\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getwithdefaultdefaultvalue",children:".getWithDefault(defaultValue)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.getWithDefault<R>(defaultValue: R): T | R\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the value inside the Maybe if it is Some, otherwise returns the default value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples"',children:"const someValue = Maybe.Some(5);\nconsole.log(someValue.getWithDefault(10)); // 5\n\nconst noneValue = Maybe.None();\nconsole.log(noneValue.getWithDefault(10)); // 10\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unwrap",children:".unwrap()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Signature"',children:"Maybe<T>.unwrap()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the value inside the ",(0,s.jsx)(n.code,{children:"Maybe"})," if it is ",(0,s.jsx)(n.code,{children:"Some"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="Examples',children:'const maybe = Maybe.fromNullable("Hello world!");\nconst value = maybe.unwrap();  // does not compile!\n\nif (maybe.isSome()) {\n  const value = maybe.unwrap(); // Hello world!\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var s=a(6540);const l={},t=s.createContext(l);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);